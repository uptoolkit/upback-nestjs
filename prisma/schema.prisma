generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// nest graphql generator helper (will create your GraphQL type from prisma)
generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  schemas  = ["public", "auth"]
}

model User {
  // Suggested from https://next-auth.js.org/adapters/models
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Domain specific for exemple
  slug          String?   @unique
  name          String?
  posts         Post[]

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String?

  @@schema("public")
}
